<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Audax Labs</title>
        <link>https://blog.audax-labs.com</link>
        <description><![CDATA[A short sturdy weblog, fond of food and industry]]></description>
        <atom:link href="https://blog.audax-labs.com/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 02 Aug 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>Recipe: Everyday quinoa</title>
    <link>https://blog.audax-labs.com/posts/2021-08-02-Recipe-everyday-quinoa.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on August  2, 2021
        
    </section>
    <section>
        <p>Serves four as a side.</p>
<h2 id="ingredients">Ingredients</h2>
<ul>
<li>1 cup quinoa, rinsed</li>
<li>1 shallot, fine dice</li>
<li>4 cloves garlic, fine dice</li>
<li>1 tbsp butter</li>
<li>1 tsp salt (4g)</li>
<li>1/4 tsp MSG</li>
<li>“some” chili flakes</li>
<li>black pepper and turmeric to taste</li>
<li>2 cups water</li>
</ul>
<h2 id="method">Method</h2>
<ol type="1">
<li>Melt the butter in a small saucepan over medium-low heat.</li>
<li>Add the garlic and chili flakes and cook until garlic is fragrant and barely starting to turn golden, about 2-3min</li>
<li>Add quinoa and increase heat to medium. Toast quinoa another 2-3min, stirring occasionally. There’s no visual cue for this, just don’t go too long.</li>
<li>Add water, salt, and spices. Cover and bring to a boil, then immediately reduce to a bare simmer (low heat). Cook covered for 15min.</li>
<li>After 15min, uncover and taste for salt, adding more if necessary. Cook uncovered until remaining liquid evaporates and quinoa is the texture you want it.</li>
</ol>
<h2 id="discussion">Discussion</h2>
<p>Somewhere earlier this year I decided to develop a taste (and a recipe) for quinoa, mostly because it seemed like a fun thing to do. I read a few internet recipes and generalized them to this basic technique, and a few variations I’m going to post about later. This takes about 20min, scales up or down well, and produces good consistent results. I make it (at 1/4 scale) maybe three or four times a week.</p>
<p>Quinoa has a reputation for being… not very tasty. I think this comes from a couple of sources.</p>
<p>First, quinoa in a state of nature is covered with saponins, which taste like ass. You need to rinse quinoa before cooking it. “But my bag says it’s pre-washed!” rinse it anyway, it takes barely a minute and you shouldn’t take chances unless you want bitter soapy-tasting quinoa, which you don’t. Use a fine mesh strainer, and fish the last little seeds out with a little silicone spatula in step 3. It’s not as annoying as you think, I promise.</p>
<p>(As an aside, I used to soak the quinoa before rinsing it, but it turns out that’s not necessary. At least, I stopped doing it a while ago, and didn’t notice any change in taste or texture.)</p>
<p>The second “problem” with quinoa is that people want it to be some sort of Maximally Healthy superfood. It’s nutritional profile is great, don’t get me wrong, but for god’s sake don’t skimp on fat or salt here. Plain quinoa is… subtle-tasting, which means bland. Use plenty of butter and salt and season it like you mean it.</p>
<p>A few notes on seasoning:</p>
<ul>
<li>I use Diamond Crystal kosher salt. If you don’t, go by weight rather than volume. Or just eyeball it, this isn’t rocket science. I go with “a two-finger pinch per person”.</li>
<li>The recipe above is deliberately a bit light on salt. Don’t add just the amount I listed and then complain that it tastes boring, taste for salt at the end and add more if you need to. (Do this with every recipe, actually.)</li>
<li>Yes, MSG. It’s delicious. If you don’t have any, get some, but otherwise you can replace it with a bit of soy sauce and fish sauce and get your glutamates from more “natural” sources. Or just add more salt if you hate umami, I’m not your boss.</li>
<li>You don’t have to season with turmeric and pepper, but I like it that way. I’ve also made it with a Bay leaf for seasoning instead. I think it’s hard to go wrong here.</li>
</ul>
<p>This’ll do well pretty much any place you’d use rice. One thing I like to do as a quick low-effort meal is chop up and fry some farmer’s sausage while the quinoa cooks, throw in a handful of sauerkraut with the sausage right at the end just to warm it up, then put that on top of the quinoa. It’s also good with sausage gravy (or gumbo) overtop, or as a side for damn near any protein. I haven’t tried frying it like rice but I bet that’d work.</p>
<p>Adding water will get you a softer texture, which can be nice if you’re sort of in the mood for grits. I have a couple variations based on this idea that I’ll post later.</p>
    </section>
</article>
]]></description>
    <pubDate>Mon, 02 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://blog.audax-labs.com/posts/2021-08-02-Recipe-everyday-quinoa.html</guid>
    <dc:creator>Matt Olson</dc:creator>
</item>
<item>
    <title>Standing up a Hakyll blog with Windows and Netlify</title>
    <link>https://blog.audax-labs.com/posts/2021-08-01-New-blog-who-dis.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on August  1, 2021
        
    </section>
    <section>
        <p>This is my second attempt at a static-site-gen blog. So far it’s going a lot better than the first, because I’m working with some technologies I really like, but that’s not to say everything was smooth sailing. <em>That</em> means a story, which means this blog post.</p>
<p>I got up yesterday morning and decided to start messing around with Haskell on my personal desktop (I write Haskell for work, too, and this felt like a decent chance to get better at it.) The first project that popped into my mind was resurrecting my blog. I’ve been meaning to try Hakyll for a few years now, but for <a href="https://twitter.com/arachnocapital2/status/1421898007021195268">various reasons</a> it hasn’t happened.</p>
<h3 id="context">Context</h3>
<p>This is a “what I tried and how I got things to work” story, not a tutorial. You can probably guess from the look of the site that I’m not done yet. As such this won’t be a great reference for googling error messages, but it <em>just might</em> help someone who’s trying to do the same thing. I’ll be happy if it entertains.</p>
<h2 id="step-one-wsl2">Step one: WSL2</h2>
<p>My desktop is built for gaming, a bit of digital art, and a lot of shitpoasting on twitter, so it runs Windows 10. This isn’t an operating system well-known for supporting Haskell - before my new job, my tool of choice was F#. Fortunately, Microsoft made 2019 the Year Of Linux On The Desktop with WSL2, so I installed that. Two reboots later I had an ubuntu-flavoured bash prompt in front of me, and I <code>apt-got</code> Haskell-Platform.</p>
<p>Work uses <code>cabal</code> so I figured I would too, but when I ran <code>cabal update</code> it spat out an ominous warning about backward-compatibility and deprecation, and scolded me to use the <code>new-</code> versions of various verbs. I figured I’d try that with <code>cabal new-install hakyll</code>, and bounced off an error about not being able to open a pipe. An hour of fucking around and several <code>rm -rf ~/.cabal</code>s later, neither the old nor the new <code>cabal install</code>s would get properly through pulling down Hakyll, so I gave up and uninstalled ubuntu. (This did leave WSL2 enabled, which may be important later.)</p>
<h2 id="step-two-visual-studio-code-devcontainers">Step two: Visual Studio Code devcontainers</h2>
<p>Well, I’m not gonna let myself feel ashamed of my gamer-oriented software. I’d planned to work in VS Code <em>anyway</em> - I use it for work, it’s pretty good - and went back to google, where I found an old friend: <a href="https://hmemcpy.com/2020/02/setting-up-a-haskell-development-environment-in-minutes-in-vscode/">Igal Tabachnik wrote up a “Haskell on Windows in minutes!” tutorial using a Docker container and VS Code</a>. Even better, a Haskell container had been officially adopted by the VS Code devcontainers crew, a mere nine days (fresh! relevant!) before I’d looked.</p>
<p>So I followed the <a href="https://code.visualstudio.com/docs/remote/containers">VS Code tutorial</a> and downloaded Docker Desktop. That tutorial is very clear that you need to give Docker Desktop permission to access your filesystem, at least where your code lives. Unfortunately, there’s no <strong>Resources &gt; File Sharing</strong> option available, as referenced by the tutorial.</p>
<p>Well, I got this far by dint of a “let’s keep going and see what happens” attitude, and I wasn’t going to let this slow me down. I tried the Node container suggested in the tutorial and then went looking for that Haskell container.</p>
<p>I found a note on <a href="https://github.com/hmemcpy/haskell-hie-devcontainer">Igal’s github</a> to the effect of “don’t use this, use theirs!” Well. As far as I can tell there isn’t a list on a web page.</p>
<p>With a bit of digging through other platforms’ tutorials I discovered the magic sauce:</p>
<ol type="1">
<li>Open a project directory</li>
<li>Open the VS Code command palette</li>
<li>Select “Remote-Containers: Add Development Container Configuration Files”</li>
<li>Start typing “Hask…” until something pops up</li>
</ol>
<p>I guess one interpretation of ✨<em>The Magic Of Containers</em>✨ is that they serve as configuration files? Whatever. I’m up and running in a container with ghc installed!</p>
<h2 id="step-three-stack-jacked">Step three: <code>stack</code>, jacked</h2>
<p>The <a href="https://jaspervdj.be/hakyll/tutorials.html">Hakyll tutorials</a> largely use <code>stack</code> over <code>cabal</code>, and I remembered getting bitten by <code>cabal</code> only an hour or two earlier, so I figured I’d try <code>stack</code>. Alas, <code>stack install hakyll</code> ran into three sets of version incompatibilities for Hakyll’s dependencies, and even though <code>stack</code>’s errors helpfully told me how to add exceptions for those particular package versions, two of them asked me to satisfy <em>mutually exclusive</em> version bounds.</p>
<p>Fortunately, <code>stack</code> also told me where the “YOLO” setting was for version constraints, and after enabling that and waiting approximately a week and a half for Pandoc to compile, I had a working install of Hakyll 4.14.</p>
<p>The great virtue of Haskell is that “if it compiles, it runs”, right? On to the next step, building a site skeleton. That went off without a hitch and led me to the meat of the Hakyll workflow, building and running the site generator.</p>
<h3 id="a-brief-digression-on-why-im-doing-all-this">A brief digression on why I’m doing all this</h3>
<blockquote>
<p>It’s been about four years since I blogged with Jekyll. One of my strongest impressions of <em>that</em> tool is its configuration-orientedness - plugins and yaml files and other activities that are at best programming-<em>adjacent</em>. Hakyll, however, promises to let you <em>write code</em> to change how you want your static site generated. It’s more of a framework for writing an SSG than a stanndalone SSG in itself. That’s why I have to build it here, but it’s also why I’m on this path in the first place.</p>
</blockquote>
<p>Building the site generator is as simple as <code>stack build</code>. Except, <code>stack</code> can’t figure out how to build my site generator, because it can’t find version 4.14 of Hakyll on any of the resolvers it knows about.</p>
<p>You know, the package I just laboriously built locally, from which I generated this haskell project.</p>
<p>After half an hour of fruitless fucking around, I gave up on <code>stack</code> and went back to <code>cabal</code>, meticulously prefixing everything with <code>new-</code>. That took another week and a half to compile Pandoc, but worked fine in the end.</p>
<p>Magically, I now have a static site!</p>
<h2 id="step-four-nifty-netlify">Step four: Nifty Netlify</h2>
<p>Now that I have some HTML, CSS, and a lambda-looking image, I just need a place to put it. My old blog was hosted on <code>github.io</code>, but since then I acquired the <code>audax-labs.com</code> vanity domain and I haven’t really done anything with it. Time to pop into my AWS account, where the domain’s hosted…</p>
<p>…and remember which authenticator app I used for the admin account…</p>
<p>…and remember that it was the same thing I used for $oldjob, which I deleted in a fit of digital cleanliness after I quit…</p>
<p>…<em>fuck!</em></p>
<p>Fortunately, AWS has a <em>great</em> account recovery process if you’ve kept access to your root account’s email. Five minutes later I was logged in as root and setting up MFA devices once again, by far the fastest problem I overcame in this whole saga.</p>
<p>I did all that so I could hook up Netlify to the domain. For my purposes here, at least, Netlify is a hosting company with a CI back-end that hooks into a git repository (github, in my case). Push to <code>main</code>, Netlify picks that up, and files get copied over. Once AWS negotiated the DNS transfer and <code>blog.audax-labs.com</code> went live, they even provisioned an SSL cert for me. The AWS account recovery might’ve been the <em>fastest</em> problem I solved, but that’s because Netlify didn’t present <em>any</em> problems.</p>
<p>I’m using their free tier, which offers one build agent and 300 CI minutes per month. Building static HTML locally, pushing it to a branch, and copying it out costs approximately zero CI minutes per deploy, so I think I’ll be good for a while.</p>
<h2 id="step-five-tailwind">Step five: tailwind</h2>
<p>Now that I had a site and a public place to put it, I wanted to make it look better. That means CSS, and an excuse to play around with <a href="https://tailwindcss.com">Tailwind CSS</a> which I’ve been aware of for a little while.</p>
<p>Unfortunately, I don’t know shit-all about CSS, and Tailwind’s docs are written for people who do this stuff for a living. It took me a few minutes to generate a Tailwind CSS file and start seeing <em>some</em> change in the rendered result, and several <em>hours</em> to figure out how to actually get it to work <em>properly</em>.</p>
<p>In particular, most of the instructions for integrating Tailwind assume that you’re adding it to an existing toolset rather than YOLO’ing it from the command line. This combined with my lack of CSS knowledge - turns out you can’t just magic up <code>@</code>-directives - and Firefox’s cheerful willingness to render as much malformed CSS as it can rather than spit out error messages. Eventually I figured out that I needed to combine Tailwind with Hakyll’s default CSS and run it all through <code>nvx tailwindcss</code> to build a style sheet that’d do what I want. In retrospect, the <a href="https://tailwindcss.com/docs/installation#using-tailwind-cli">tailwind CLI docs</a> told me what I needed to know but assumed I knew what workflow to use, which I didn’t.</p>
<p>This is perhaps not a great use for Tailwind - which gives you fine control over laying out and rendering individual components, where Hakyll generates a bunch of bulk HTML for you out of markdown - but screw it, I’m having fun.</p>
<h2 id="step-six-conclusions">Step six: conclusions?</h2>
<p>I’m not entirely sure how to end this post. I got an awful lot done just by beating my head against it, but by the same token the barriers to entry for setting up a blog like this one are shockingly low in this year of our lord two thousand and twenty-one. I clearly have a lot of work to do, but at the same time what I’ve done on this blog kinda kicks ass.</p>
<p>Also, this was all inspired by quinoa. Stay frosty for that.</p>
    </section>
</article>
]]></description>
    <pubDate>Sun, 01 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://blog.audax-labs.com/posts/2021-08-01-New-blog-who-dis.html</guid>
    <dc:creator>Matt Olson</dc:creator>
</item>
<item>
    <title>Book review - Camille Fournier's "The Manager's Path"</title>
    <link>https://blog.audax-labs.com/posts/2017-12-23-Review-The-Managers-Path.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on December 23, 2017
        
    </section>
    <section>
        <p>I thought I’d start writing book reviews, because there are a <em>lot</em> of books that’ve helped me immensely but also don’t seem to be well-known. In this case, I picked up Camille Fournier’s <em>The Manager’s Path</em> shortly after falling into my first team-lead role, and quickly realized I should’ve read it far earlier.</p>
<h2 id="who-should-read-this-book">Who should read this book?</h2>
<p>Pretty much everyone in the tech industry.</p>
<h3 id="even-me-im-a-junior-developer-and-i-dont-ever-want-to-be-a-manager">Even me? I’m a junior developer, and I don’t ever want to be a manager</h3>
<p>Even you.</p>
<h2 id="who-shouldnt-read-this-book">Who <em>shouldn’t</em> read this book?</h2>
<p>My lovely parents, who are retired and might read this blog every once in a while to see what I’m up to.</p>
<h2 id="what-am-i-going-to-get-out-of-it">What am I going to get out of it?</h2>
<p><em>The Manager’s Path</em> follows a rough “software dev to CTO” career progression, with a few spurs off to the side for finger-quotes “tech roles” that aren’t explicitly tasked with people management (tech lead, staff engineer, lead architect, that sort of thing). There’s a chapter at the end on bootstrapping, or changing, engineering culture.</p>
<p>The key value this brings to those of us near the bottom of the org chart is <em>setting basic expectations.</em> Fournier <em>starts</em> with a chapter for individual contributors (ICs), which is all about pointing out things your manager should be doing, and why. It takes some of the mystery out of the relationship – which, as she points out, can be jarring.</p>
<p>For example, if you know about 1-on-1s, that recurring meeting your team lead schedules on your second or third week with the company turns into a good sign rather than a worrying unknown. If you’ve been with the team for a while and you <em>don’t</em> have a 1-on-1 scheduled, this is your opportunity to manage up – ask your lead for a quick meeting over coffee to get some feedback.</p>
<p>The whole book’s valuable for this kind of context. Maybe you never want to be a CTO, but knowing more about their responsibilities can give you some context on what <em>your</em> CTO just did.</p>
<h2 id="but-isnt-the-book-about-management">But isn’t the book about <em>management?</em></h2>
<p>Oh. Yeah. If and when you <em>do</em> end up in a leadership position – which can be as seemingly innocuous as “hey, can you mentor our new hire while they’re onboarding?” or as terrifying as “hey, your team lead’s moving to a different company and you’re the best replacement we have” – this is a great book for actually <em>learning how to lead.</em> I’m sure there are companies out there with comprehensive internal leadership training, but if you aren’t working for one of those, this book is a great alternative.</p>
<p>While the book’s densely packed with knowledge, I found it a pretty quick and engaging read. There’s enough shift back and forth between general principles, personal anecdotes, hypotheticals, and sidebars that it never really bogs down. Pretty much by construction, most of the book is going to be <em>interesting context</em> rather than <em>directly relevant,</em> which encourages skimming and revisiting rather than a close, cover to cover study. You can probably get, I dunno, 80% of the benefit out of <em>The Manager’s Path</em> over a weekend, then come back later for more focused study of individual bits as and if they get relevant.</p>
<h3 id="but-i-said-i-didnt-want-to-go-into-management">But I said I didn’t <em>want</em> to go into management!</h3>
<p>Weird, I’ve said that too.</p>
<p>Seriously though, this book is helpful even if you want to stay 100% on the tech path. There’s not a <em>lot</em> of direct treatment of senior tech-track roles, but Fournier often contrasts senior ICs with managers at roughly the same level of responsibility. If nothing else, you’ll be able to see the sorts of decisions you’d be leaving for someone in a more manager-ish role (maybe you’re actually more interested in driving those!), and how what you like to think of as a technical job title really involves a lot of leadership and consensus-building. (Imagine how effective an enterprise architect who rules by decrees handed down from a castle in the clouds is going to be. Or maybe you don’t have to.)</p>
<h2 id="summary">Summary</h2>
<p>This book will give you context for what your manager, and the rest of your company’s management structure, are trying to get done, with a bit of why and how they’re doing it. That alone is worth the price of admission, but beyond that, it’s a fantastic resource if you ever find yourself having to mentor, manage, or lead people in tech. It might even make you <em>choose</em> that path, or at least consider it.</p>
<p>Buy it and read it.</p>
<p><strong>Fournier, Camille: <em>The Manager’s Path: A Guide for Tech Leaders Navigating Growth &amp; Change</em></strong></p>
<p>2017, O’Reilly Media, 244 pages</p>
<p><a href="https://smile.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897/">Amazon.com</a></p>
<h3 id="thanks">Thanks</h3>
<p>Thanks to <span class="citation" data-cites="fried_brice">[@fried_brice]</span>(https://twitter.com/fried_brice) for a quick, <em>a la minute</em> editing pass and some great suggestions.</p>
    </section>
</article>
]]></description>
    <pubDate>Sat, 23 Dec 2017 00:00:00 UT</pubDate>
    <guid>https://blog.audax-labs.com/posts/2017-12-23-Review-The-Managers-Path.html</guid>
    <dc:creator>Matt Olson</dc:creator>
</item>
<item>
    <title>Flexible Code</title>
    <link>https://blog.audax-labs.com/posts/2017-02-23-Flexible-code.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on February 23, 2017
        
    </section>
    <section>
        <h1 id="section">1.</h1>
<p>Last week, another team lead asked me to take on one of his team’s products. It’s not an unreasonable request; his team’s overworked and oddly understaffed, and this particular product is closer to my team’s domain than to his. Given some of the work we’ll be doing in the future, having that product in our domain could be quite convenient.</p>
<p>What’s interesting is how he sold it.</p>
<p>“This shouldn’t impose much work on you guys, if any. The service has been running in production for years, now, and hasn’t changed in a while. It hasn’t crashed, hasn’t broken any integrations, hasn’t gotten anyone paged at 3am. It’s fairly clean, decoupled from most everything else, and hasn’t needed fixes. It should be just fine.”</p>
<p>Great!</p>
<p>Right?</p>
<h1 id="section-1">2.</h1>
<blockquote>
<p>If you want your software to be flexible, you have to flex it.</p>
<ul>
<li>Uncle Bob, <em>The Clean Coder</em></li>
</ul>
</blockquote>
<p>We’ve been working on a “from-scratch” rewrite against horrid legacy systems nobody dares to touch. It sounds like a classic software horror story, the second-system effect (this is actually the <em>fifth</em> system by my count), but it’s coming along fairly well (if at a slog). The previous systems were written to specific contracts (and then maladapted to others); this one’s intended from the ground up as a proper product.</p>
<p>One of the newer developers on the team claims it’s the best code he’s ever seen. And honestly, I’m pretty damn proud of what we’ve done in a complex domain in which even the customers often don’t know what they want.</p>
<p>We’re constantly comparing the new system against the olds, looking for discrepancies between the two (some of which matter, some of which are the olds being absurd). We’re looking for a minimal subset of features needed to migrate the next chunk of clients from the olds to the new.</p>
<p><em>We’re constantly in the codebase, changing shit, often making major refactorings.</em></p>
<h1 id="section-2">3.</h1>
<p>I dug up the code for the service I’ll be inheriting. True to claim, it hasn’t been touched in a <em>while.</em></p>
<p>It’s not that it’s <em>bad</em> code. It’s not a three-thousand-line VB.NET monstrosity with a single thousand-line god method in the middle. (Given the context, that god’s probably Azathoth.) It’s well-factored into your usual layer-cake architecture. The names mean things.</p>
<p>But, well… it’s obvious that it hasn’t benefitted from what the company’s collectively learned in the years since it was architected.</p>
<p>For example, it relies on reflection, and ORM, and other tools that seemed so promising until we found that they were great ways to turn compile-time type errors into runtime exceptions. Not in monstrous ways; as advertised, its uptime record is stellar. And I expect it will be, as long as nothing changes. When it does, we’ll hope the NHibernate mappings are adequately tested.</p>
<p>None of this is to disparage the system’s authors; they’re people I respect and admire. I respect and admire them because, among other things, they <em>never stop learning how to write better code.</em></p>
<h1 id="section-3">4.</h1>
<p>If you’re constantly in a service’s codebase, you’re <em>constantly</em> finding opportunities to make it a little bit better. “Leave the campsite cleaner than you found it.” (Praise that in code reviews, by the way, don’t shit on people who make “unnecessary” changes that improve the whole.)</p>
<p>You’re constantly in a position to look at a gnarly piece of code and shout “aha!” as you get an idea of how to improve it. Maybe that idea doesn’t work out, but it plants a seed in your mind. Maybe you jot down some notes on your idea in the company wiki. Maybe your colleague reads those notes.</p>
<p>You’re constantly bothered by the parts of the code that are full of pain and suck and fail. You’re constantly spending emotional effort trying to be patient because they’re not part of the ticket you’re working on. One day you run out of patience and fix the fucking thing. (Make a painful task frequent enough and it will be made less painful, with a baseball bat if nothing else. “HP LOAD LETTER”? What the <em>fuck.</em>)</p>
<p>Slowly, slowly, the codebase is incorporating everything that you’re learning about the domain, everything that you’re learning about where the business wants the domain to go in the future, and everything that you’re learning about how to write great code.</p>
<h1 id="section-4">5.</h1>
<p>We have services, in production, that we don’t even know how to <em>build</em> any more. At least, not at a company level. The guy who knows is on vacation.</p>
<p>But they’re stable! They almost <em>never</em> cause trouble!</p>
<p>Hmm.</p>
<h1 id="section-5">6.</h1>
<p>I came across a thought experiment (which I can’t find in a quick google) in which every feature branch you opened deleted itself after twenty-four hours.</p>
<p>“Oh fuck, that’s horrible! So much time spent in re-work!”</p>
<p>Really? If I spent a day working on a feature branch, it would probably take me an hour or two to reiterate the previous day’s work. Okay, “time wasted”, but I’d probably do a better job along the way because I’d be seeing the problem for a second time. That gives me four or five hours to do <em>new</em> work; more, if my company’s not obnoxious about meetings.</p>
<p>Not really that much of a difference, is it?</p>
<p>People often see refactoring as re-work, but that ignores the benefit of reviewing - re- <em>viewing</em> - the code with fresh eyes and more knowledge. Of having the opportunity to incorporate that new knowledge into the codebase, be it a better understanding of the domain or just a better understanding of that one library we’re using.</p>
<h1 id="section-6">7.</h1>
<p>I’d like to say we’ve all heard of the Last Responsible Moment, but experience dictates otherwise. Handwaving enormously, it suggests that the longer we can wait before making a decision, and gather knowledge relevant to that decision, the better a decision we’ll make.</p>
<p>But we’re always gathering knowledge. Often our customers are gathering knowledge that makes them realize how different their requirements are than what they put in the RFP. How do you know if your system is flexible enough to accommodate their new understanding of what they need?</p>
<p>Well, if you’ve been flexing it hard, up to your elbows in its guts, on a regular basis, you probably have some idea.</p>
<p>Your product manager will be glad to hear that.</p>
    </section>
</article>
]]></description>
    <pubDate>Thu, 23 Feb 2017 00:00:00 UT</pubDate>
    <guid>https://blog.audax-labs.com/posts/2017-02-23-Flexible-code.html</guid>
    <dc:creator>Matt Olson</dc:creator>
</item>

    </channel>
</rss>
